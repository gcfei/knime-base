<?xml version="1.0" encoding="utf-8"?>
<knimeNode icon="csvwriter.png" type="Sink" xmlns="http://knime.org/node/v3.6" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://knime.org/node/v3.6 http://knime.org/node/v3.6.xsd">
	<name>CSV Writer2</name>
	
	<shortDescription>
		Saves a data table into an ASCII file.
	</shortDescription>
	
	<fullDescription>
		<intro>
 		This node writes out the input data table into a file or to a remote location denoted by an URL. The node
        provides many options to customize the output format (see below). But there is no checking done on the
        settings, so it is possible to write out the data in a format that makes it	impossible to read it in again
         (e. g. if you specify no data separator).<br />
         Note that if the destination location is a remote URL not all options are available because in general it's
         not possible to determine whether the remote location exists. In this case it will always be overwritten.
 		</intro>
 		<tab name="Settings">
 		<description>
 		    General settings regarding the output file location and formats.
 		</description>
		<option name="Write to">
			Select a file system in which you want to store the file. There
			are
			four default file system options to choose from:
			<br />
			<ul>
				<li>Local File System: Allows you to select a location in your
					local
					system.
				</li>
				<li>Relative to: Allows you to choose whether to resolve the path
					relative to the workflow, mountpoint or node.
				</li>
				<li>Mountpoint: Allows you to choose a mountpoint. Whenever this is
					selected, a new drop-down menu appears to choose from available
					mountpoints.
				</li>
				<li>Custom URL: Uses the standard URL handler providing the ability
					to write a file to URLs (e.g. file, http or KNIME protocol).
					Browsing is disabled for this option.
				</li>
			</ul>
			It is possible to use other file systems with this node. Therefore,
			you have to enable the file system connection input port of this node
			by clicking the
			<b>...</b>
			in the bottom left corner of the node's icon and choose
			<i>Add File System Connection port</i>
			.
			<br />
			Afterwards, you can simply connect the desired connector node to the
			reader node. The file system connection will then be shown in the
			drop down menu.
		</option>
		<option name="File/URL">
			Enter a valid destination. Depending on the selected file system this
			is either a path (used by
			<i>Local File System</i>
			,
			<i>Relative to</i>
			,
			<i>Mountpoint</i>
			options and custom file systems added by specific connector nodes) or
			a URL (used by
			<i>Custom URL</i>
			option).
			<br />
			A path usually starts with a slash (/) character and does not contain
			a protocol.
			You can also choose a previously selected file from
			the
			drop-down list, or select a destination from the
			&quot;Browse...&quot; dialog (browsing is not available for custom
			URLs).
		</option>
		<option name="Timeout (ms)">
			Timeout in milliseconds when connecting to remote resources / writing
			remote files.
			<tt>0</tt>
			means no
			timeout. In case it takes longer to connect to the host /
			write the file, the
			node fails to
			execute.
			<br />
			<i>Note</i>
			: This option is only active in case that the
			<i>Custom URL</i>
			file system is selected. Other file
			systems don't use a timeout or the
			timeout is set directly in the specific
			connector node.
		</option>
		<option name="Overwrite file if exists">Select when existing files should be
			overwritten.
			If this option is unchecked, the node will fail if a
			file already
			exists.
		</option>
		<option name="If file exists...">Specify the behavior of the node in 
 		    case the output file already exists. <i>Overwrite</i> will replace any 
 		    existing file, <i>Append</i> will append the input table to the end
 		    of the file (possibly skipping the column header) and <i>Abort</i>
 		    will issue an error during the node's execution (to prevent
 		    unintentional overwrite).</option>
		</tab>
		<option name="Create parent directories if required">Select when the directories of the selected output
			location should be created if they do not already exist. If this
			option is unchecked, the node will fail if a directory does not
			exist.
		</option>
			
 		<option name="Write column header">If checked, the column names will be
 			written out in the first line of the output file.
			</option>		
 		<option name="Don&apos;t write column headers if file exists">
 			If checked, the column headers will not be written when the output
 			is appended to the already existing output file. 
 			This is particularly useful when the CSV Writer is
 			used in a loop to report results. This option is ignored
 			when the column header is not written anyway or the file append option
 			is unchecked (see below).
			</option>		
 		<option name="Write row ID">If checked, the row IDs will be
 			added to the output, as first item in each line.
		</option>		
 		<option name="Compress output file (gzip)">Compress the output file
 		    in gzip format. If enabled, you will not be able to append to an
 		    existing file.
		</option>		

		<tab name="Advanced">
		<description>
		  In the Advanced tab, you can specify the character(s) that will be written 
		  out between the data items.
		</description>
        <option name="Data Separator"> You can use &quot;\t&quot; for a tab or &quot;\n&quot; 
            for a new line character (and must use &quot;\\&quot; for a backslash) in 
            any character sequence.
        </option>
 		<option name="Missing Value Pattern">In the Advanced tab, enter a pattern 
 			that will be written out for missing data values. Note, the missing
 			value pattern will never be put into quotes (see below).
			</option>
        <option name="Line Ending">
            In the tab "Advanced" you can select the line endings that are written to the file. Default value is the
            system default value, which is system dependent (LF on Linux/Unix systems, CR+LF on Windows systems). You 
            can enforce a certain line ending to generate a file that is readable on a different operating system. 
        </option>
		</tab>
		<tab name="Quotes">
		<description>In the Quotes tab, you can enter a left
		    and right quotation mark pattern. Also, select a mode, which determines
		    when quotation marks should be placed around the data item. When quotes
		    are used (in every mode other than &quot;never&quot;) you must also specify a 
		    replacement pattern for the right quote. If it appears in the data
		    item, it must be replaced (so it won&apos;t be confused with the actual
		    closing quote). 
	    </description>
		<option name="Quote Mode: always">Every data item written out is
		    placed between quotation marks. (The missing value pattern is not
		    quoted though.)
			</option>
		<option name="Quote Mode: if needed">Quotes are only placed around a 
		    data item that contains the data separator (specified in the Advanced
		    tab) or if it equals the missing value pattern. The right quote pattern
		    will be replaced if it appears in a quoted data item.
			</option>
		<option name="Quote Mode: non-numerical only">Integer and floating point 
		    numbers are not quoted, all other data items are. (Selecting the decimal
		    point as data separator will lead to an output that can&apos;t be read in 
		    again.) The right quote is replaced in quoted items.
			</option>
		<option name="Quote Mode: never">No data item is placed between quotation
		    marks. You should specify a replacement pattern for the data separator,
		    if it occurs in the data item.
			</option>
		</tab>
		<tab name="Comment Header">
		<description>In the Comment Header tab you can add a 
		    comment header to the beginning of the output. Either specify your 
		    own comment line(s) or choose from the predefined items. 
		    If you check one of the options you must also enter a comment begin 
		    and comment end pattern.
		</description>
		<option name="Header Content: the current creation time">If checked, a
		    comment line with the current time and date is added.
			</option>
		<option name="Header Content: the user account name">If checked, the login
		    name of the user that created the file (probably you!) is inserted.
			</option>
		<option name="Header Content: the input table name">If checked, a comment
		    line is added showing the name of the table the data was read from.
			</option>
		<option name="Header Content: this text">If you check this, you can enter
		    any text, that will be added then to the comment header. Use &quot;\n&quot; to
		    start a new line, and &quot;\t&quot; to insert a tab character (and &quot;\\&quot; to
		    produce a backslash).
			</option>
		<option name="Comment Pattern">
		    If you have checked at least one of the content options, you must
		    provide comment begin and end patterns that are placed around the
		    comment header then. If you omit the end pattern the begin pattern
		    is placed at the beginning of each comment line (assuming single
		    line comments, in contrast to block comment if you specify both
		    patterns).
			</option>
		<option name="Comment Indentation">
		    If you have checked at least one of the content options, you can
		    specify an indentation string, i.e., a prefix for every comment line.
		</option>
		</tab>
		<tab name="Number Format">
		<description>
		    In the tab "Number Format" you can define the decimal separator and
		    whether scientific notation should be used.
	    </description>
	    <option name="Decimal Separator">
	    	Here you can enter a character that is used as decimal separator for
	    	floating point numbers. It replaces the default character '.' then.
	    </option>
	    <option name="Scientific Notation">
	    	Check this if you want very large and very small floating point
	    	numbers to be written in scientific notation (e.g., 1.0E9 instead of
	    	1,000,000,000).
	    </option>
		</tab>
	    <tab name="Encoding">
            <option name="File Encoding">
    	        To write a csv file with a different encoding, you can select a character set in this tab (UTF-8, 
    	        UTF-16, etc.), or specify any other encoding supported by your Java VM. The default value uses the default
    	        encoding of the Java VM, which may depend on the locale or the Java property &quot;file.encoding&quot;
            </option>
	    </tab>
		<link href="https://www.knime.com/knime-introductory-course/chapter4/section1/write-data-to-a-csv-file">
			KNIME E-Learning Course: Write Data to a CSV File
		</link>
	</fullDescription>
	
	<ports>
		<inPort index="0" name="Input table">The data table to write out.</inPort>
	</ports>	
</knimeNode>


